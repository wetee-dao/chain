
//! Autogenerated weights for wetee_gov


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for wetee_gov.
pub trait WeightInfo {
	fn submit_proposal() -> Weight;
}

/// Weights for wetee_gov
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `WeteeGov::Periods` (r:1 w:0)
	/// Proof: `WeteeGov::Periods` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `WeteeOrg::Members` (r:1 w:0)
	/// Proof: `WeteeOrg::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `WeteeGov::PublicPropCount` (r:1 w:1)
	/// Proof: `WeteeGov::PublicPropCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `WeteeGov::PublicProps` (r:1 w:1)
	/// Proof: `WeteeGov::PublicProps` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `WeteeGov::MaxPublicProps` (r:1 w:0)
	/// Proof: `WeteeGov::MaxPublicProps` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn submit_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `292`
		//  Estimated: `3757`
		// Minimum execution time: 39_955_000 picoseconds.
		Weight::from_parts(40_266_000, 3757)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `WeteeGov::Periods` (r:1 w:0)
	/// Proof: `WeteeGov::Periods` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `WeteeOrg::Members` (r:1 w:0)
	/// Proof: `WeteeOrg::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `WeteeGov::PublicPropCount` (r:1 w:1)
	/// Proof: `WeteeGov::PublicPropCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `WeteeGov::PublicProps` (r:1 w:1)
	/// Proof: `WeteeGov::PublicProps` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `WeteeGov::MaxPublicProps` (r:1 w:0)
	/// Proof: `WeteeGov::MaxPublicProps` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn submit_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `292`
		//  Estimated: `3757`
		// Minimum execution time: 39_955_000 picoseconds.
		Weight::from_parts(40_266_000, 3757)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}