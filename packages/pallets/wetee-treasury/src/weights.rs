
//! Autogenerated weights for wetee_treasury

// Executed Command:
// ./target/debug/wetee-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// wetee-treasury
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// packages/pallets/wetee-treasury/src/weights.rs
// --template
// ./hacks/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for wetee_treasury.
pub trait WeightInfo {
	fn spend() -> Weight;
}

/// Weights for wetee_treasury
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn spend() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 173_242_000 picoseconds.
		Weight::from_parts(174_772_000, 0)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn spend() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 173_242_000 picoseconds.
		Weight::from_parts(174_772_000, 0)
	}
}